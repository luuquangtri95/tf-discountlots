{%- capture page_url -%}{%- render 'page-url' -%}{%- endcapture -%}

{%- assign dev_mode = request.design_mode -%}
{%- if page_url contains 'view=schema-colors' -%}
  {%- assign dev_mode = true -%}
  {%- assign dev_mode_fe = true -%}
{%- endif -%}

{%- if dev_mode -%}
  <button
    class="jsTogglePopup cursor-pointer opacity-90 fixed top-1/2 p-4 -translate-y-1/2 right-0 bg-white rounded-l-lg shadow-[0_3px_6px_rgba(0,0,0,0.16),0_3px_6px_rgba(0,0,0,0.23)]"
    data-control="#schemaColors"
  >
    <svg
      class="group-[.show-schema-colos]/body:[transform:rotateY(180deg)] transition-all"
      width="22"
      height="22"
      viewBox="0 0 22 22"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path fill-rule="evenodd" clip-rule="evenodd" d="M10.8849 0.805456C11.9589 -0.268487 13.7001 -0.268484 14.774 0.805457L20.4088 6.44026C21.4828 7.51421 21.4828 9.2554 20.4088 10.3293L13.2026 17.5356C12.1286 18.6095 10.3874 18.6095 9.31351 17.5356L8.9009 17.1229L5.80571 20.2182C4.47758 21.5463 2.32424 21.5463 0.996102 20.2182C-0.332035 18.89 -0.332033 16.7367 0.996103 15.4086L4.09129 12.3134L3.6787 11.9008C2.60475 10.8268 2.60475 9.08564 3.6787 8.01169L10.8849 0.805456ZM12.5517 2.4722C12.7051 2.31878 12.9539 2.31878 13.1073 2.4722L14.3057 3.67062L13.5675 4.40881C13.1072 4.86907 13.1072 5.61529 13.5675 6.07557C14.0277 6.53582 14.774 6.53582 15.2342 6.07557L15.9725 5.33737L18.7421 8.10701C18.8955 8.26043 18.8955 8.50917 18.7421 8.66259L14.2858 13.1188L14.2847 13.12C14.1312 13.2723 13.8833 13.2719 13.7303 13.1188L8.09545 7.48402C7.94203 7.3306 7.94203 7.08186 8.09545 6.92844L12.5517 2.4722ZM6.17059 8.85329L5.34545 9.67844C5.19203 9.83186 5.19203 10.0806 5.34545 10.234L10.9803 15.8688C11.1337 16.0223 11.3824 16.0223 11.5358 15.8688L12.361 15.0437C12.2573 14.9659 12.1578 14.8799 12.0635 14.7856L6.4287 9.15077C6.33438 9.05646 6.24835 8.957 6.17059 8.85329ZM2.66285 17.0753L5.75804 13.9801L7.23415 15.4562L4.13895 18.5515C3.73134 18.959 3.07048 18.959 2.66285 18.5515C2.25524 18.1439 2.25524 17.4829 2.66285 17.0753Z" fill="black"/>
      <path d="M19.115 21.7419C20.4167 21.7419 21.4721 20.6865 21.4721 19.3848C21.4721 18.5516 20.5068 16.0496 19.8116 14.3559C19.5517 13.7225 18.6784 13.7225 18.4183 14.3559C17.7233 16.0496 16.7578 18.5516 16.7578 19.3848C16.7578 20.6865 17.8132 21.7419 19.115 21.7419Z" fill="black"/>
    </svg>
  </button>

  <popup-component
    id="schemaColors"
    class="popup-schema-colors popup-component group top-0 right-0 h-full fixed z-[999999] {{active_class| strip_newlines | split: '|' | join: ' '}}"
    data-body-class="show-schema-colos"
    {% if dev_mode_fe %}
      auto-show
    {% endif %}
  >
    {% style %}
      body.show-schema-colos {
        overflow: auto !important;
      }
      body.show-schema-colos #schemaColors {
        visibility: visible !important;
        opacity: 1 !important;
        z-index: 999999 !important;
        pointer-events: all !important;
      }
      .half {
        clip-path: polygon(50% 0, 100% 0, 100% 100%, 50% 100%);
      }
      .schema-card {
        border: 1px dashed blue;
      }
      .button-group button:hover {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;
      }
    {% endstyle %}
    <div class="jsClose absolute left-0 top-0 w-full h-full"></div>
    <div class="popup-content drawer-transition {% if request.design_mode %}!max-h-[50%]{% else %}!max-h-[80%]{% endif %} group-[.show-schema-colos]/body:bottom-0 !bg-[#F8F8F8] p-2 lg:p-6 absolute -bottom-full left-0 w-full h-full rounded-[8px]">
      <div class="max-h-full max-w-full overflow-x-hidden overflow-y-auto">
        <div class="grid items-1 md:items-2 xl:items-3 gap-8 lg:gap-8 lg:gap-y-10 items-stretch">
          {{- content -}}
        </div>
      </div>
    </div>

    <script>
      async function copyToClipboard(element) {
        try {
          const dataClass = element.getAttribute('data-class');
          await navigator.clipboard.writeText(dataClass);
        } catch (err) {
          console.error('Failed to copy: ', err);
        }
      }
    </script>
  </popup-component>
{%- else -%}
  {%- assign splitKey = '<!-- aKeyToSplitContent -->' -%}
  {%- capture contentSplit -%}{%- render 'split', content: content, key: 'schema_colors', splitKey: splitKey -%}{%- endcapture -%}

  {%- liquid
    assign contentSplit = contentSplit | split: splitKey
    assign themeStructure = contentSplit[1]
    assign headContent = headContent | append: contentSplit[0]
  -%}

  <!-- split:css[ -->
  {% style %}
    {{- headContent | strip_newlines | replace: '  ', '  ' | replace: ' ', ' ' -}}
  {% endstyle %}
  <!-- split:css] -->
{%- endif -%}
